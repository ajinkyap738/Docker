Docker-Compose 
    A docker-compose.yaml file is used to define and manage multi-container Docker applications. 
    It is a configuration file written in YAML (YAML Ain't Markup Language) that specifies the services,
    networks, and volumes required to run an application within Docker containers.

Key Concepts:
Services: 
        A service represents a container or a group of containers that perform a specific function.
        For example, a web server, database, or caching service can each be defined as separate services 
        in a docker-compose.yaml file.

Networks: 
        Docker Compose allows defining custom networks that services can communicate over. 
        This ensures that containers can securely communicate with each other, typically 
        within the same environment.

Volumes: 
        Volumes are used for persistent storage. When you use Docker containers, 
        any data created inside the container will be lost once the container is destroyed. 
        Volumes help to persist data across container restarts.
=================================================================
vi docker.compose.yaml

version: '3'  # The version of Docker Compose you're using

services:
  web:
    image: nginx:latest  # The image to use for the container
    ports:
      - "80:80"  # Map port 80 of the container to port 80 on the host machine

  db:
    image: postgres:latest  # The image for the PostgreSQL database
    environment:
      POSTGRES_PASSWORD: example  # Environment variable for DB password
    volumes:
      - db_data:/var/lib/postgresql/data  # Mount a volume to persist data

volumes:
  db_data:  # Define a volume to persist data for the database
=================================================================
Key Benefits of Using Docker Compose:
Simplified Multi-Container Management: 
        Instead of managing each container individually with docker run commands, 
        you can define all containers in a single docker-compose.yaml file and manage 
        them with a single command (docker-compose up).

Environment Consistency: 
        It ensures that the entire development or production environment can be easily 
        reproduced by everyone. The same docker-compose.yaml file can be shared with developers, 
        reducing the "it works on my machine" problem.

Networking and Dependency Management: 
        Docker Compose handles the networking between containers automatically, and 
        you can define dependencies between containers (e.g., making sure the database 
        starts before the web server).

Version Control: 
        The YAML file can be version-controlled along with the application code, 
        which makes it easier to track changes and share configurations.

Easier Configuration of Services: 
        With Docker Compose, you can easily define services like databases, caching, and web servers, 
        along with their configurations, in a single file.
==========================================================


Why is Docker Compose Used?
Simplifies Setup:
         Instead of running multiple commands to set up each container, Docker Compose allows you to 
         define the whole stack and run it with a single command.

Development & Testing: 
        It's widely used in local development environments to mirror production setups, ensuring 
        consistency. You can run a full stack with minimal configuration and start testing without 
        worrying about complex configurations.

Scaling:
         Docker Compose allows you to scale services. For example, you can easily scale up a web 
         server or database container with the docker-compose scale command.

Automation and CI/CD: 
        It is commonly used in Continuous Integration and Continuous Deployment (CI/CD) pipelines to 
        automate testing and deployment of multi-container applications.

Example Use Cases:
        A web application with a front-end container (e.g., Nginx), back-end container (e.g., Node.js), and database container (e.g., PostgreSQL).
        Microservices architecture where each service runs in its own container but communicates with others (e.g., user service, order service, payment service).
        How to Use It:
        Create the docker-compose.yaml file.
        Run docker-compose up to start all the services defined in the file.
        Use docker-compose down to stop and remove all containers.